import com.binance.api.client.BinanceApiCallback;
import com.binance.api.client.BinanceApiRestClient;
import com.binance.api.client.BinanceApiWebSocketClient;
import com.binance.api.client.domain.event.UserDataUpdateEvent;
import com.binance.api.client.exception.BinanceApiException;
import com.binance.api.client.impl.BinanceApiRestClientImpl;
import com.binance.api.client.impl.BinanceApiWebSocketClientImpl;
import com.github.jnidzwetzki.bitfinex.v2.BitfinexApiBroker;
import com.github.jnidzwetzki.bitfinex.v2.entity.APIException;
import com.github.jnidzwetzki.bitfinex.v2.manager.OrderManager;

import java.io.IOException;
import java.util.Properties;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Main {

    public static void main(String[] args) throws Exception{
        //checkBinanceResponse();
        checkBitfinexResponse();

        while (true){}
    }

    private static void checkBitfinexResponse() throws IOException, APIException {
        Properties properties = PropertyHandler.loadProps("src/main/resources/props");
        String bitfinexKey = properties.getProperty("BITFINEX_API_KEY");
        String bitfinexSecret = properties.getProperty("BITFINEX_API_SECRET");
        BitfinexApiBroker bitfinexApiBroker = new BitfinexApiBroker(bitfinexKey, bitfinexSecret);

        bitfinexApiBroker.connect();

        OrderManager orderManager = bitfinexApiBroker.getOrderManager();
        orderManager.registerCallback(exchangeOrder -> {
            System.out.println(exchangeOrder);
        });
    }

    private static void checkBinanceResponse() throws IOException {
        BinanceApiWebSocketClient binanceSocketClient = new BinanceApiWebSocketClientImpl();

        Properties properties = PropertyHandler.loadProps("src/main/resources/props");

        String binanceKey = properties.getProperty("BINANCE_API_KEY");
        String binanceSecret = properties.getProperty("BINANCE_API_SECRET");


        BinanceApiRestClient binanceClient = new BinanceApiRestClientImpl(binanceKey, binanceSecret);
        String binanceListeningKey = binanceClient.startUserDataStream();

        binanceSocketClient.onUserDataUpdateEvent(binanceListeningKey, new BinanceApiCallback<UserDataUpdateEvent>() {
            @Override
            public void onResponse(UserDataUpdateEvent response) throws BinanceApiException {
                System.out.println(response);
            }
        });
    }

    ;
}
